ebuscpp provides c++ classes and tools to communicate via ebus.


libraries:

 'libutils'   Classes for queueing, notification, application daemonize and options handling.

 'libnetwork' Contains some classes for socket handling as client and/or server.

 'liblogger'  Is a small log to logging into stdout and log files.


 'libebus'    Contains classes to interact with an ebus system. The classes with 'Ebus' prefix
              represent the high level API.

              The main part of this library is a 'finite state machine' (FSM) which will be run
              as a seperate thread. Via ebus device the FSM handle all the communication to
              other ebus participant. The 'IEbusProcess' interface provides the ability to
              interact with ebus as master (active) or slave (passive) member.

  API/Interface classes:

  * EbusSequence: All kind of ebus messages (telegrams) are sequences of individual hexadecimal
                  characters. A 'EbusSequence' can hold only one (full) ebus message.

  * EbusDevice:   Provides the hardware access for network or serial ebus devices.

  * EbusFSM:      Represents the FSM it selfs which can be act as passive or active ebus
                  participant.

  * EbusMessage:  An 'EbusMessage' contains a EbusSequence and a their answer.
                  (Only needed as master in active mode.)

  * EbusProcess:  A base class for derivation as a process thread for the coupling of FSM to
                  active / passive Ebus message handling

  * IEbusLogger:  Is a simple logger interface for internal messages of FSM.


Example applications which use all types of above described classes:

 'ebusproxy' provides a communication interface too ebus equipped systems.

 'ebusctl' is a tcp/udp socket client for ebusproxy.

 'ebusfeed' sends hex values from dump file to a pseudo terminal device (pty).



For bugs and missing features use github issue system.

The author can be contacted at roland.jax@liwest.at.
